import os
import pandas as pd
import logging
from datetime import datetime
######降档判断######
def 降档判断处理(df_待调剂明细数据, df_待调剂数据, df_降档):
    """
    执行降档判断处理流程
    参数:
        df_待调剂明细数据: 待调剂明细数据DataFrame
        df_待调剂数据: 待调剂数据DataFrame
        df_降档: 降档报表DataFrame
    返回:
        处理后的df_待调剂明细数据
    """
    # 判断是否需要降档处理
    merged_待调剂明细数据_待调剂数据 = pd.merge(
        df_待调剂明细数据,
        df_待调剂数据[['统计月份', '政策分期小项编码', '降档判断']],
        on=['统计月份', '政策分期小项编码'],
        how='left',
        indicator=True
    )

    # 初始化降档列为'非降档'
    df_待调剂明细数据['降档'] = '非降档'

    # 只对需要降档判断的记录进行处理
    需要降档判断的记录 = merged_待调剂明细数据_待调剂数据['降档判断'] == '需要'

    # 为不需要降档判断的记录添加结算原因
    df_待调剂明细数据.loc[~需要降档判断的记录, '结算原因'] = '|降档:无需判断降档|'

    # 对需要降档判断的记录进行降档判断
    if 需要降档判断的记录.any():
        # 筛选出关联降档报表【是否当月携入移动】为'否'的数据
        df_降档 = df_降档[df_降档['是否当月携入移动'] == '否']
        
        # 待调剂明细数据表与降档报表比碰
        merged_待调剂明细数据_降档 = pd.merge(
            df_待调剂明细数据[需要降档判断的记录],
            df_降档[['用户编码', '业务发展月']],
            on=['用户编码', '业务发展月'],
            how='left',
            indicator=True
        )
        
        # 更新需要降档判断的记录的降档状态
        df_待调剂明细数据.loc[需要降档判断的记录, '降档'] = merged_待调剂明细数据_降档['_merge'].map({
            'both': '降档',
            'left_only': '非降档'
        })
    
    return df_待调剂明细数据
######待调剂明细数据表与渠道档案报表比碰######
def 渠道档案判断处理(df_待调剂明细数据, df_渠道档案报表):
    """
    执行渠道档案判断处理流程
    参数:
        df_待调剂明细数据: 待调剂明细数据DataFrame
        df_渠道档案报表: 渠道档案报表DataFrame
    返回:
        处理后的df_待调剂明细数据
    """
    # 将业务发展月转换为日期格式
    df_待调剂明细数据['业务发展月'] = pd.to_datetime(
        df_待调剂明细数据['业务发展月'], 
        format='%Y%m%d', 
        errors='coerce'
    )
    
    # 筛选渠道档案报表【渠道状态】为'正常'和'冻结'的数据
    df_渠道档案报表 = df_渠道档案报表[df_渠道档案报表['渠道状态'].isin(['冻结','正常'])]
    
    # 渠道档案报表'协议起始日'与'协议终止日'转换为日期格式
    for column in ['协议起始日', '协议终止日']:
        df_渠道档案报表[column] = pd.to_datetime(
            df_渠道档案报表[column], 
            format='%Y%m%d', 
            errors='coerce'
        )
    
    # 待调剂明细数据表与渠道档案报表比碰
    merged_待调剂明细数据_渠道档案报表 = pd.merge(
        df_待调剂明细数据,
        df_渠道档案报表[['渠道编码', '发展月结算范围', '协议起始日', '协议终止日', '渠道状态']],
        on=['渠道编码'],
        how='left',
        indicator=True
    )

    # 渠道状态判断
    df_待调剂明细数据['解约'] = merged_待调剂明细数据_渠道档案报表['_merge'].map({
        'both': '正常', 
        'left_only': '冻结'
    })
    
    # 协议终止日判断
    merged_待调剂明细数据_渠道档案报表.loc[
        (merged_待调剂明细数据_渠道档案报表['_merge'] == 'both') &
        (merged_待调剂明细数据_渠道档案报表['协议终止日'].notna() < (pd.to_datetime('today') - pd.offsets.MonthBegin(1))),
        '结算状态'
    ] = '待稽核'

    # 更新结算状态和解约状态
    df_待调剂明细数据['结算状态'] = merged_待调剂明细数据_渠道档案报表['结算状态']
    df_待调剂明细数据.loc[df_待调剂明细数据['结算状态'].notna(), '解约'] = df_待调剂明细数据['结算状态']
    df_待调剂明细数据.loc[df_待调剂明细数据['结算状态'] == '待稽核', '结算原因'] += '|解约:协议终止日待稽核|'

    # 处理发展月结算范围
    发展月结算范围_存在记录 = (merged_待调剂明细数据_渠道档案报表['_merge'] == 'both') & (merged_待调剂明细数据_渠道档案报表['发展月结算范围'].notna())

    if 发展月结算范围_存在记录.any():
        # 转换日期格式并进行判断
        merged_待调剂明细数据_渠道档案报表.loc[发展月结算范围_存在记录, '发展月结算范围'] = pd.to_datetime(
            merged_待调剂明细数据_渠道档案报表.loc[发展月结算范围_存在记录, '发展月结算范围'], 
            format='%Y%m%d',
            errors='coerce'
        )
        
        # 设置解约状态
        merged_待调剂明细数据_渠道档案报表.loc[发展月结算范围_存在记录, '解约'] = '冻结'
        merged_待调剂明细数据_渠道档案报表.loc[
            发展月结算范围_存在记录 & 
            (merged_待调剂明细数据_渠道档案报表['业务发展月'] <= merged_待调剂明细数据_渠道档案报表['发展月结算范围']),
            '解约'
        ] = '正常'

        # 只更新有发展月结算范围记录的解约状态和结算原因
        df_待调剂明细数据.loc[发展月结算范围_存在记录, '解约'] = merged_待调剂明细数据_渠道档案报表.loc[发展月结算范围_存在记录, '解约']
        df_待调剂明细数据.loc[
            发展月结算范围_存在记录 & 
            (merged_待调剂明细数据_渠道档案报表['解约'] == '冻结'), 
            '结算原因'
        ] += '|解约:超出发展月结算范围|'
    
    return df_待调剂明细数据

######待调剂明细数据表异常判断######
def 判重处理(df_待调剂明细数据, df_待调剂数据):
    """
    执行判重处理流程
    参数:
        df_待调剂明细数据: 待调剂明细数据DataFrame
        df_待调剂数据: 待调剂数据DataFrame
    返回:
        处理后的df_待调剂明细数据
    """
    判重指令 = {
        '无需判断':{
            '关联字段':[]
        },
        '用户号码':{
            '关联字段':['用户号码','政策分期小项编码']
        },
        '订购流水':{
            '关联字段':['订购流水','政策分期小项编码']
        },
        '账号ID':{
            '关联字段':['账号id','政策分期小项编码']
        },
        '营销案':{
            '关联字段':['用户号码','政策分期小项编码','业务编码','业务发展月']
        }
    }
    
    # 待调剂明细数据表与待调剂数据比碰
    merged_待调剂明细数据_待调剂数据 = pd.merge(
        df_待调剂明细数据,
        df_待调剂数据[['统计月份','政策分期小项编码','判重指令']],
        on=['统计月份','政策分期小项编码'],
        how='left',
        indicator=True
    )

    # 初始化用户重复次数列
    df_待调剂明细数据['用户重复次数'] = 1

    # 对每种判重指令进行处理
    for 指令, 配置 in 判重指令.items():
        if 指令 != '无需判断' and 配置['关联字段']:
            # 获取当前判重指令的记录
            当前指令记录 = merged_待调剂明细数据_待调剂数据['判重指令'] == 指令
            if 当前指令记录.any():
                # 按关联字段分组计数
                重复计数 = df_待调剂明细数据.loc[当前指令记录].groupby(配置['关联字段']).size()
                # 更新用户重复次数
                for idx in df_待调剂明细数据.loc[当前指令记录].index:
                    分组值 = tuple(df_待调剂明细数据.loc[idx, field] for field in 配置['关联字段'])
                    重复次数 = 重复计数[分组值]
                    df_待调剂明细数据.loc[idx, '用户重复次数'] = 重复次数
                    df_待调剂明细数据.loc[idx, '判重指令'] = 指令
                    if 重复次数 > 1:
                        df_待调剂明细数据.loc[idx, '结算状态'] = '异常'
                        df_待调剂明细数据.loc[idx, '结算原因'] += f'|判重:{指令}|'
    return df_待调剂明细数据

######结算状态和金额处理######
def 结算状态和金额处理(df_待调剂明细数据):
    """
    执行结算状态判断和金额计算流程
    参数:
        df_待调剂明细数据: 待调剂明细数据DataFrame
    返回:
        处理后的df_待调剂明细数据
    """
    # 筛选结算状态为空的数据
    df_待调剂明细数据_结算状态为空 = df_待调剂明细数据[df_待调剂明细数据['结算状态'].isna()]
    
    # 设置默认值为'不结算'
    df_待调剂明细数据_结算状态为空['结算状态'] = '不结算'
    
    # 降档列为'非降档'与解约列为'正常'的数据结算结果为结算
    df_待调剂明细数据_结算状态为空.loc[
        (df_待调剂明细数据_结算状态为空['降档'] == '非降档') &
        (df_待调剂明细数据_结算状态为空['解约'] == '正常'),
        '结算状态'
    ] = '结算'
    
    # 更新结算状态
    df_待调剂明细数据.loc[df_待调剂明细数据['结算状态'].isna(), '结算状态'] = df_待调剂明细数据_结算状态为空['结算状态']
    
    # 根据结算状态设置结算金额和调剂金额
    df_待调剂明细数据['结算金额'] = df_待调剂明细数据.apply(lambda x: x['金额'] if x['结算状态'] == '结算' else 0, axis=1)
    df_待调剂明细数据['调剂金额'] = df_待调剂明细数据.apply(lambda x: 0 if x['结算状态'] == '结算' else -x['金额'], axis=1)
    
    return df_待调剂明细数据

def 保存处理结果(df_待调剂明细数据, file_path_费用结算数据稽核):
    """
    保存处理结果到Excel文件
    参数:
        df_待调剂明细数据: 待调剂明细数据DataFrame
        file_path_费用结算数据稽核: 费用结算数据稽核文件路径
    """
    # 保存主数据到费用结算数据稽核文件
    df_待调剂明细数据.to_excel(file_path_费用结算数据稽核, index=False, sheet_name='合作费用业务明细查询0')
    
    # 提取并保存营销案重复用户号码
    df_重复用户号码 = df_待调剂明细数据.loc[
        (df_待调剂明细数据['判重指令'] == '营销案') & 
        (df_待调剂明细数据['用户重复次数'] > 1), 
        '用户号码'
    ].drop_duplicates().to_frame()
    
    with pd.ExcelWriter(file_path_费用结算数据稽核, mode='a', engine='openpyxl') as writer:
        df_重复用户号码.to_excel(writer, sheet_name='营销案重复用户号码', index=False)

######主程序######
#数据表
basic_path = rf"C:\project\python_project\AI+市场工具&稽核\AI+市场工具&稽核第一期需求\选项目-制表-得出结论"
# 获取当前年月
current_date = datetime.now()
year_suffix = str(current_date.year)[2:]  # 获取年份后两位
month = current_date.month
day = current_date.day
project_path = rf"{basic_path}\{year_suffix}年{month}月{day}日数据"
if not os.path.exists(project_path):
    os.makedirs(project_path)
    logging.info("文件夹创建成功")

file_path_待调剂明细数据 = rf"{project_path}\待调剂明细数据.xlsx"
file_path_待调剂数据 = rf"{project_path}\待调剂数据.xlsx"
file_path_降档报表 = rf"{project_path}\降档报表.xlsx"
file_path_渠道档案报表 = rf"{project_path}\渠道档案报表.xlsx"
file_path_费用结算数据稽核 = rf"{project_path}\关于{year_suffix}年{month}月费用结算数据稽核.xlsx"
logging.info("文件初始化完成")
#获取数据表
df_待调剂明细数据 = pd.read_excel(file_path_待调剂明细数据)
df_待调剂数据 = pd.read_excel(file_path_待调剂数据, skiprows=1)
df_降档 = pd.read_excel(file_path_降档报表, skiprows=1)
df_渠道档案报表 = pd.read_excel(file_path_渠道档案报表, skiprows=1)

#初始化结算原因
df_待调剂明细数据['结算原因'] = ''
#筛选待调剂明细数据表金额大于0的数据
df_待调剂明细数据 = df_待调剂明细数据[df_待调剂明细数据['金额'] > 0]

#降档判断
df_待调剂明细数据 = 降档判断处理(df_待调剂明细数据, df_待调剂数据, df_降档)

#待调剂明细数据表与渠道档案报表比碰
df_待调剂明细数据 = 渠道档案判断处理(df_待调剂明细数据, df_渠道档案报表)

#待调剂明细数据表异常判断
df_待调剂明细数据 = 判重处理(df_待调剂明细数据, df_待调剂数据)

#结算状态和金额处理
df_待调剂明细数据 = 结算状态和金额处理(df_待调剂明细数据)

#生成处理好的xlsx文件
保存处理结果(df_待调剂明细数据, file_path_费用结算数据稽核)



